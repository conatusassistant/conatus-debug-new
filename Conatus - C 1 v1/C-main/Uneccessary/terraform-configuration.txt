// terraform/main.tf
provider "aws" {
  region = var.aws_region
}

# Configure Terraform backend for state storage
terraform {
  backend "s3" {
    bucket = "conatus-terraform-state"
    key    = "conatus/terraform.tfstate"
    region = "us-east-1"
    dynamodb_table = "conatus-terraform-locks"
    encrypt        = true
  }
}

# Network configuration
module "vpc" {
  source = "./modules/vpc"
  
  vpc_name = "${var.project_name}-vpc"
  cidr_block = var.vpc_cidr
  availability_zones = var.availability_zones
  public_subnet_cidrs = var.public_subnet_cidrs
  private_subnet_cidrs = var.private_subnet_cidrs
}

# Database configuration (Supabase hosted instance reference)
module "database" {
  source = "./modules/database"
  
  supabase_project_ref = var.supabase_project_ref
  redis_node_type = var.redis_node_type
  redis_num_cache_clusters = var.redis_num_cache_clusters
}

# Lambda functions for backend services
module "lambda" {
  source = "./modules/lambda"
  
  project_name = var.project_name
  vpc_id = module.vpc.vpc_id
  private_subnet_ids = module.vpc.private_subnet_ids
  lambda_functions = var.lambda_functions
  lambda_security_group_id = module.vpc.lambda_security_group_id
  supabase_url = var.supabase_url
  supabase_service_key = var.supabase_service_key
  redis_endpoint = module.database.redis_endpoint
}

# API Gateway
module "api_gateway" {
  source = "./modules/api_gateway"
  
  project_name = var.project_name
  lambda_function_arns = module.lambda.lambda_function_arns
  lambda_function_names = module.lambda.lambda_function_names
  stage_name = var.environment
}

# CloudFront distribution for frontend
module "frontend" {
  source = "./modules/frontend"
  
  project_name = var.project_name
  domain_name = var.domain_name
  certificate_arn = var.certificate_arn
  api_gateway_endpoint = module.api_gateway.api_gateway_endpoint
}

# Scheduled Tasks Worker
module "scheduled_tasks" {
  source = "./modules/scheduled_tasks"
  
  project_name = var.project_name
  vpc_id = module.vpc.vpc_id
  private_subnet_ids = module.vpc.private_subnet_ids
  ecs_security_group_id = module.vpc.ecs_security_group_id
  supabase_url = var.supabase_url
  supabase_service_key = var.supabase_service_key
  redis_endpoint = module.database.redis_endpoint
}

# Monitoring and Alarms
module "monitoring" {
  source = "./modules/monitoring"
  
  project_name = var.project_name
  lambda_function_names = module.lambda.lambda_function_names
  api_gateway_id = module.api_gateway.api_gateway_id
  cloudfront_distribution_id = module.frontend.cloudfront_distribution_id
  alarm_email = var.alarm_email
}

# Outputs
output "api_gateway_endpoint" {
  value = module.api_gateway.api_gateway_endpoint
}

output "cloudfront_domain_name" {
  value = module.frontend.cloudfront_domain_name
}

// terraform/variables.tf
variable "aws_region" {
  description = "AWS region to deploy resources"
  default     = "us-east-1"
}

variable "project_name" {
  description = "Project name used as prefix for resources"
  default     = "conatus"
}

variable "environment" {
  description = "Environment (dev, staging, prod)"
  default     = "prod"
}

variable "vpc_cidr" {
  description = "CIDR block for VPC"
  default     = "10.0.0.0/16"
}

variable "availability_zones" {
  description = "Availability zones for VPC subnets"
  type        = list(string)
  default     = ["us-east-1a", "us-east-1b", "us-east-1c"]
}

variable "public_subnet_cidrs" {
  description = "CIDR blocks for public subnets"
  type        = list(string)
  default     = ["10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24"]
}

variable "private_subnet_cidrs" {
  description = "CIDR blocks for private subnets"
  type        = list(string)
  default     = ["10.0.11.0/24", "10.0.12.0/24", "10.0.13.0/24"]
}

variable "domain_name" {
  description = "Domain name for the application"
  default     = "conatus.app"
}

variable "certificate_arn" {
  description = "ARN of ACM certificate for the domain"
}

variable "lambda_functions" {
  description = "Map of Lambda functions to deploy"
  type        = map(object({
    handler = string
    runtime = string
    timeout = number
    memory_size = number
    environment_variables = map(string)
  }))
  default     = {
    query_router = {
      handler = "api/routes/query-router.handler"
      runtime = "nodejs16.x"
      timeout = 30
      memory_size = 512
      environment_variables = {}
    },
    automations = {
      handler = "api/routes/automations.handler"
      runtime = "nodejs16.x"
      timeout = 30
      memory_size = 512
      environment_variables = {}
    },
    integrations = {
      handler = "api/routes/integrations.handler"
      runtime = "nodejs16.x"
      timeout = 30
      memory_size = 512
      environment_variables = {}
    },
    social = {
      handler = "api/routes/social.handler"
      runtime = "nodejs16.x"
      timeout = 30
      memory_size = 512
      environment_variables = {}
    }
  }
}

variable "supabase_project_ref" {
  description = "Supabase project reference ID"
}

variable "supabase_url" {
  description = "Supabase project URL"
}

variable "supabase_service_key" {
  description = "Supabase service key for backend access"
  sensitive   = true
}

variable "redis_node_type" {
  description = "ElastiCache Redis node type"
  default     = "cache.t3.small"
}

variable "redis_num_cache_clusters" {
  description = "Number of cache clusters for Redis"
  default     = 2
}

variable "alarm_email" {
  description = "Email address for CloudWatch alarms"
}

// terraform/modules/vpc/main.tf
resource "aws_vpc" {
  cidr_block           = var.cidr_block
  enable_dns_support   = true
  enable_dns_hostnames = true
  
  tags = {
    Name = var.vpc_name
  }
}

resource "aws_subnet" "public" {
  count                   = length(var.public_subnet_cidrs)
  vpc_id                  = aws_vpc.this.id
  cidr_block              = var.public_subnet_cidrs[count.index]
  availability_zone       = var.availability_zones[count.index]
  map_public_ip_on_launch = true
  
  tags = {
    Name = "${var.vpc_name}-public-subnet-${count.index + 1}"
  }
}

resource "aws_subnet" "private" {
  count                   = length(var.private_subnet_cidrs)
  vpc_id                  = aws_vpc.this.id
  cidr_block              = var.private_subnet_cidrs[count.index]
  availability_zone       = var.availability_zones[count.index]
  
  tags = {
    Name = "${var.vpc_name}-private-subnet-${count.index + 1}"
  }
}

resource "aws_internet_gateway" "this" {
  vpc_id = aws_vpc.this.id
  
  tags = {
    Name = "${var.vpc_name}-igw"
  }
}

resource "aws_eip" "nat" {
  count = length(var.public_subnet_cidrs)
  vpc   = true
  
  tags = {
    Name = "${var.vpc_name}-nat-eip-${count.index + 1}"
  }
}

resource "aws_nat_gateway" "this" {
  count         = length(var.public_subnet_cidrs)
  allocation_id = aws_eip.nat[count.index].id
  subnet_id     = aws_subnet.public[count.index].id
  
  tags = {
    Name = "${var.vpc_name}-nat-gw-${count.index + 1}"
  }
}

resource "aws_route_table" "public" {
  vpc_id = aws_vpc.this.id
  
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.this.id
  }
  
  tags = {
    Name = "${var.vpc_name}-public-rt"
  }
}

resource "aws_route_table" "private" {
  count  = length(var.private_subnet_cidrs)
  vpc_id = aws_vpc.this.id
  
  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.this[count.index].id
  }
  
  tags = {
    Name = "${var.vpc_name}-private-rt-${count.index + 1}"
  }
}

resource "aws_route_table_association" "public" {
  count          = length(var.public_subnet_cidrs)
  subnet_id      = aws_subnet.public[count.index].id
  route_table_id = aws_route_table.public.id
}

resource "aws_route_table_association" "private" {
  count          = length(var.private_subnet_cidrs)
  subnet_id      = aws_subnet.private[count.index].id
  route_table_id = aws_route_table.private[count.index].id
}

resource "aws_security_group" "lambda" {
  name        = "${var.vpc_name}-lambda-sg"
  description = "Security group for Lambda functions"
  vpc_id      = aws_vpc.this.id
  
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  tags = {
    Name = "${var.vpc_name}-lambda-sg"
  }
}

resource "aws_security_group" "ecs" {
  name        = "${var.vpc_name}-ecs-sg"
  description = "Security group for ECS tasks"
  vpc_id      = aws_vpc.this.id
  
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  tags = {
    Name = "${var.vpc_name}-ecs-sg"
  }
}

// terraform/modules/vpc/outputs.tf
output "vpc_id" {
  value = aws_vpc.this.id
}

output "public_subnet_ids" {
  value = aws_subnet.public.*.id
}

output "private_subnet_ids" {
  value = aws_subnet.private.*.id
}

output "lambda_security_group_id" {
  value = aws_security_group.lambda.id
}

output "ecs_security_group_id" {
  value = aws_security_group.ecs.id
}

// terraform/modules/vpc/variables.tf
variable "vpc_name" {
  description = "Name of the VPC"
}

variable "cidr_block" {
  description = "CIDR block for VPC"
}

variable "availability_zones" {
  description = "Availability zones for VPC subnets"
  type        = list(string)
}

variable "public_subnet_cidrs" {
  description = "CIDR blocks for public subnets"
  type        = list(string)
}

variable "private_subnet_cidrs" {
  description = "CIDR blocks for private subnets"
  type        = list(string)
}

// terraform/modules/database/main.tf
# Redis ElastiCache cluster for caching and message queue
resource "aws_elasticache_subnet_group" "redis" {
  name        = "conatus-redis-subnet-group"
  description = "Redis subnet group for Conatus"
  subnet_ids  = var.private_subnet_ids
}

resource "aws_elasticache_replication_group" "redis" {
  replication_group_id          = "conatus-redis"
  replication_group_description = "Redis cluster for Conatus application"
  node_type                     = var.redis_node_type
  number_cache_clusters         = var.redis_num_cache_clusters
  automatic_failover_enabled    = true
  subnet_group_name             = aws_elasticache_subnet_group.redis.name
  security_group_ids            = [aws_security_group.redis.id]
  parameter_group_name          = "default.redis6.x"
  
  tags = {
    Name = "conatus-redis"
  }
}

resource "aws_security_group" "redis" {
  name        = "conatus-redis-sg"
  description = "Security group for Redis cluster"
  vpc_id      = var.vpc_id
  
  ingress {
    from_port       = 6379
    to_port         = 6379
    protocol        = "tcp"
    security_groups = [var.lambda_security_group_id, var.ecs_security_group_id]
  }
  
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  tags = {
    Name = "conatus-redis-sg"
  }
}

// terraform/modules/database/variables.tf
variable "vpc_id" {
  description = "VPC ID where Redis will be deployed"
}

variable "private_subnet_ids" {
  description = "Private subnet IDs for Redis cluster"
  type        = list(string)
}

variable "lambda_security_group_id" {
  description = "Security group ID for Lambda functions"
}

variable "ecs_security_group_id" {
  description = "Security group ID for ECS tasks"
}

variable "redis_node_type" {
  description = "ElastiCache Redis node type"
}

variable "redis_num_cache_clusters" {
  description = "Number of cache clusters for Redis"
}

variable "supabase_project_ref" {
  description = "Supabase project reference ID"
}

// terraform/modules/database/outputs.tf
output "redis_endpoint" {
  value = aws_elasticache_replication_group.redis.primary_endpoint_address
}

output "supabase_ref" {
  value = var.supabase_project_ref
}

// terraform/modules/lambda/main.tf
resource "aws_iam_role" "lambda_role" {
  name = "conatus-lambda-role"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_policy" "lambda_policy" {
  name        = "conatus-lambda-policy"
  description = "Policy for Conatus Lambda functions"
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ]
        Effect   = "Allow"
        Resource = "arn:aws:logs:*:*:*"
      },
      {
        Action = [
          "ec2:CreateNetworkInterface",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DeleteNetworkInterface"
        ]
        Effect   = "Allow"
        Resource = "*"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_policy_attachment" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = aws_iam_policy.lambda_policy.arn
}

resource "aws_lambda_function" "functions" {
  for_each = var.lambda_functions
  
  function_name = "${var.project_name}-${each.key}"
  role          = aws_iam_role.lambda_role.arn
  handler       = each.value.handler
  runtime       = each.value.runtime
  timeout       = each.value.timeout
  memory_size   = each.value.memory_size
  
  vpc_config {
    subnet_ids         = var.private_subnet_ids
    security_group_ids = [var.lambda_security_group_id]
  }
  
  environment {
    variables = merge(
      each.value.environment_variables,
      {
        SUPABASE_URL         = var.supabase_url
        SUPABASE_SERVICE_KEY = var.supabase_service_key
        REDIS_URL            = "redis://${var.redis_endpoint}:6379"
        NODE_ENV             = "production"
      }
    )
  }
  
  tags = {
    Name = "${var.project_name}-${each.key}"
  }
}

// terraform/modules/lambda/variables.tf
variable "project_name" {
  description = "Project name used as prefix for resources"
}

variable "vpc_id" {
  description = "VPC ID where Lambda functions will be deployed"
}

variable "private_subnet_ids" {
  description = "Private subnet IDs for Lambda functions"
  type        = list(string)
}

variable "lambda_security_group_id" {
  description = "Security group ID for Lambda functions"
}

variable "lambda_functions" {
  description = "Map of Lambda functions to deploy"
  type        = map(object({
    handler = string
    runtime = string
    timeout = number
    memory_size = number
    environment_variables = map(string)
  }))
}

variable "supabase_url" {
  description = "Supabase project URL"
}

variable "supabase_service_key" {
  description = "Supabase service key for backend access"
  sensitive   = true
}

variable "redis_endpoint" {
  description = "Redis endpoint for Lambda functions"
}

// terraform/modules/lambda/outputs.tf
output "lambda_function_arns" {
  value = { for name, function in aws_lambda_function.functions : name => function.arn }
}

output "lambda_function_names" {
  value = { for name, function in aws_lambda_function.functions : name => function.function_name }
}

// terraform/modules/api_gateway/main.tf
resource "aws_api_gateway_rest_api" "api" {
  name        = "${var.project_name}-api"
  description = "API Gateway for ${var.project_name}"
  
  endpoint_configuration {
    types = ["REGIONAL"]
  }
}

# API resources and methods
# Query resource
resource "aws_api_gateway_resource" "query" {
  rest_api_id = aws_api_gateway_rest_api.api.id
  parent_id   = aws_api_gateway_rest_api.api.root_resource_id
  path_part   = "query"
}

resource "aws_api_gateway_method" "query_post" {
  rest_api_id   = aws_api_gateway_rest_api.api.id
  resource_id   = aws_api_gateway_resource.query.id
  http_method   = "POST"
  authorization_type = "NONE" # We'll handle auth in Lambda
}

resource "aws_api_gateway_integration" "query_post" {
  rest_api_id             = aws_api_gateway_rest_api.api.id
  resource_id             = aws_api_gateway_resource.query.id
  http_method             = aws_api_gateway_method.query_post.http_method
  integration_http_method = "POST"
  type                    = "AWS_PROXY"
  uri                     = "arn:aws:apigateway:${var.aws_region}:lambda:path/2015-03-31/functions/${var.lambda_function_arns["query_router"]}/invocations"
}

# Query stream resource
resource "aws_api_gateway_resource" "query_stream" {
  rest_api_id = aws_api_gateway_rest_api.api.id
  parent_id   = aws_api_gateway_resource.query.id
  path_part   = "stream"
}

resource "aws_api_gateway_method" "query_stream_post" {
  rest_api_id   = aws_api_gateway_rest_api.api.id
  resource_id   = aws_api_gateway_resource.query_stream.id
  http_method   = "POST"
  authorization_type = "NONE"
}

resource "aws_api_gateway_integration" "query_stream_post" {
  rest_api_id             = aws_api_gateway_rest_api.api.id
  resource_id             = aws_api_gateway_resource.query_stream.id
  http_method             = aws_api_gateway_method.query_stream_post.http_method
  integration_http_method = "POST"
  type                    = "AWS_PROXY"
  uri                     = "arn:aws:apigateway:${var.aws_region}:lambda:path/2015-03-31/functions/${var.lambda_function_arns["query_router"]}/invocations"
}

# Similar resources for automations, integrations, and social endpoints...

# Deployment and stage
resource "aws_api_gateway_deployment" "api" {
  depends_on = [
    aws_api_gateway_integration.query_post,
    aws_api_gateway_integration.query_stream_post,
    # Add other integrations here
  ]
  
  rest_api_id = aws_api_gateway_rest_api.api.id
  
  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_api_gateway_stage" "api" {
  deployment_id = aws_api_gateway_deployment.api.id
  rest_api_id   = aws_api_gateway_rest_api.api.id
  stage_name    = var.stage_name
}

# Lambda permissions
resource "aws_lambda_permission" "query_router" {
  statement_id  = "AllowAPIGatewayInvoke"
  action        = "lambda:InvokeFunction"
  function_name = var.lambda_function_names["query_router"]
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_api_gateway_rest_api.api.execution_arn}/*/*"
}

# Similar permissions for other functions...

// terraform/modules/api_gateway/variables.tf
variable "project_name" {
  description = "Project name used as prefix for resources"
}

variable "lambda_function_arns" {
  description = "Map of Lambda function ARNs"
  type        = map(string)
}

variable "lambda_function_names" {
  description = "Map of Lambda function names"
  type        = map(string)
}

variable "stage_name" {
  description = "API Gateway stage name"
}

variable "aws_region" {
  description = "AWS region"
}

// terraform/modules/api_gateway/outputs.tf
output "api_gateway_id" {
  value = aws_api_gateway_rest_api.api.id
}

output "api_gateway_endpoint" {
  value = "${aws_api_gateway_deployment.api.invoke_url}${aws_api_gateway_stage.api.stage_name}"
}

// terraform/modules/frontend/main.tf
# S3 bucket for frontend assets
resource "aws_s3_bucket" "frontend" {
  bucket = "${var.project_name}-frontend"
  
  tags = {
    Name = "${var.project_name}-frontend"
  }
}

resource "aws_s3_bucket_public_access_block" "frontend" {
  bucket = aws_s3_bucket.frontend.id
  
  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

resource "aws_s3_bucket_policy" "frontend" {
  bucket = aws_s3_bucket.frontend.id
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect    = "Allow"
        Principal = { AWS = aws_cloudfront_origin_access_identity.frontend.iam_arn }
        Action    = "s3:GetObject"
        Resource  = "${aws_s3_bucket.frontend.arn}/*"
      }
    ]
  })
}

# CloudFront distribution
resource "aws_cloudfront_origin_access_identity" "frontend" {
  comment = "OAI for ${var.project_name} frontend"
}

resource "aws_cloudfront_distribution" "frontend" {
  enabled             = true
  is_ipv6_enabled     = true
  default_root_object = "index.html"
  aliases             = [var.domain_name]
  
  origin {
    domain_name = aws_s3_bucket.frontend.bucket_regional_domain_name
    origin_id   = "S3-${var.project_name}-frontend"
    
    s3_origin_config {
      origin_access_identity = aws_cloudfront_origin_access_identity.frontend.cloudfront_access_identity_path
    }
  }
  
  origin {
    domain_name = replace(var.api_gateway_endpoint, "/^https?://([^/]*).*/", "$1")
    origin_id   = "ApiGateway-${var.project_name}"
    
    custom_origin_config {
      http_port              = 80
      https_port             = 443
      origin_protocol_policy = "https-only"
      origin_ssl_protocols   = ["TLSv1.2"]
    }
  }
  
  # Cache behavior for frontend assets
  default_cache_behavior {
    allowed_methods        = ["GET", "HEAD", "OPTIONS"]
    cached_methods         = ["GET", "HEAD", "OPTIONS"]
    target_origin_id       = "S3-${var.project_name}-frontend"
    viewer_protocol_policy = "redirect-to-https"
    
    forwarded_values {
      query_string = false
      cookies {
        forward = "none"
      }
    }
    
    min_ttl                = 0
    default_ttl            = 3600
    max_ttl                = 86400
  }
  
  # Cache behavior for API Gateway
  ordered_cache_behavior {
    path_pattern           = "/api/*"
    allowed_methods        = ["GET", "HEAD", "OPTIONS", "PUT", "POST", "PATCH", "DELETE"]
    cached_methods         = ["GET", "HEAD", "OPTIONS"]
    target_origin_id       = "ApiGateway-${var.project_name}"
    viewer_protocol_policy = "redirect-to-https"
    
    forwarded_values {
      query_string = true
      headers      = ["Authorization", "Accept", "Content-Type"]
      cookies {
        forward = "all"
      }
    }
    
    min_ttl                = 0
    default_ttl            = 0
    max_ttl                = 0
  }
  
  custom_error_response {
    error_code             = 404
    response_code          = 200
    response_page_path     = "/index.html"
    error_caching_min_ttl  = 10
  }
  
  restrictions {
    geo_restriction {
      restriction_type = "none"
    }
  }
  
  viewer_certificate {
    acm_certificate_arn      = var.certificate_arn
    ssl_support_method       = "sni-only"
    minimum_protocol_version = "TLSv1.2_2021"
  }
  
  tags = {
    Name = "${var.project_name}-distribution"
  }
}

// terraform/modules/frontend/variables.tf
variable "project_name" {
  description = "Project name used as prefix for resources"
}

variable "domain_name" {
  description = "Domain name for the application"
}

variable "certificate_arn" {
  description = "ARN of ACM certificate for the domain"
}

variable "api_gateway_endpoint" {
  description = "API Gateway endpoint URL"
}

// terraform/modules/frontend/outputs.tf
output "cloudfront_distribution_id" {
  value = aws_cloudfront_distribution.frontend.id
}

output "cloudfront_domain_name" {
  value = aws_cloudfront_distribution.frontend.domain_name
}

output "s3_bucket_name" {
  value = aws_s3_bucket.frontend.bucket
}

// terraform/modules/scheduled_tasks/main.tf
resource "aws_ecs_cluster" "scheduled_tasks" {
  name = "${var.project_name}-scheduled-tasks"
}

resource "aws_iam_role" "ecs_task_role" {
  name = "${var.project_name}-ecs-task-role"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ecs-tasks.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_policy" "ecs_task_policy" {
  name        = "${var.project_name}-ecs-task-policy"
  description = "Policy for ${var.project_name} ECS tasks"
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ]
        Effect   = "Allow"
        Resource = "arn:aws:logs:*:*:*"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "ecs_task_policy_attachment" {
  role       = aws_iam_role.ecs_task_role.name
  policy_arn = aws_iam_policy.ecs_task_policy.arn
}

resource "aws_ecs_task_definition" "scheduled_tasks" {
  family                   = "${var.project_name}-scheduled-tasks"
  network_mode             = "awsvpc"
  requires_compatibilities = ["FARGATE"]
  cpu                      = "512"
  memory                   = "1024"
  execution_role_arn       = aws_iam_role.ecs_task_role.arn
  task_role_arn            = aws_iam_role.ecs_task_role.arn
  
  container_definitions = jsonencode([
    {
      name         = "${var.project_name}-scheduled-tasks"
      image        = "${var.ecr_repository_url}:latest"
      essential    = true
      environment  = [
        { name = "SUPABASE_URL", value = var.supabase_url },
        { name = "SUPABASE_SERVICE_KEY", value = var.supabase_service_key },
        { name = "REDIS_URL", value = "redis://${var.redis_endpoint}:6379" },
        { name = "NODE_ENV", value = "production" }
      ]
      logConfiguration = {
        logDriver = "awslogs"
        options = {
          "awslogs-group"         = "/ecs/${var.project_name}-scheduled-tasks"
          "awslogs-region"        = var.aws_region
          "awslogs-stream-prefix" = "ecs"
        }
      }
    }
  ])
}

resource "aws_cloudwatch_log_group" "scheduled_tasks" {
  name              = "/ecs/${var.project_name}-scheduled-tasks"
  retention_in_days = 14
}

resource "aws_ecs_service" "scheduled_tasks" {
  name            = "${var.project_name}-scheduled-tasks"
  cluster         = aws_ecs_cluster.scheduled_tasks.id
  task_definition = aws_ecs_task_definition.scheduled_tasks.arn
  launch_type     = "FARGATE"
  desired_count   = 1
  
  network_configuration {
    subnets          = var.private_subnet_ids
    security_groups  = [var.ecs_security_group_id]
    assign_public_ip = false
  }
}

// terraform/modules/scheduled_tasks/variables.tf
variable "project_name" {
  description = "Project name used as prefix for resources"
}

variable "vpc_id" {
  description = "VPC ID where ECS tasks will run"
}

variable "private_subnet_ids" {
  description = "Private subnet IDs for ECS tasks"
  type        = list(string)
}

variable "ecs_security_group_id" {
  description = "Security group ID for ECS tasks"
}

variable "supabase_url" {
  description = "Supabase project URL"
}

variable "supabase_service_key" {
  description = "Supabase service key for backend access"
  sensitive   = true
}

variable "redis_endpoint" {
  description = "Redis endpoint for ECS tasks"
}

variable "ecr_repository_url" {
  description = "ECR repository URL for the worker image"
}

variable "aws_region" {
  description = "AWS region"
}

// terraform/modules/monitoring/main.tf
resource "aws_cloudwatch_dashboard" "main" {
  dashboard_name = "${var.project_name}-dashboard"
  
  dashboard_body = jsonencode({
    widgets = [
      {
        type   = "metric"
        x      = 0
        y      = 0
        width  = 12
        height = 6
        properties = {
          metrics = [
            ["AWS/Lambda", "Invocations", "FunctionName", var.lambda_function_names["query_router"], { "stat": "Sum", "period": 300 }],
            ["AWS/Lambda", "Errors", "FunctionName", var.lambda_function_names["query_router"], { "stat": "Sum", "period": 300 }],
            ["AWS/Lambda", "Duration", "FunctionName", var.lambda_function_names["query_router"], { "stat": "Average", "period": 300 }]
          ]
          view    = "timeSeries"
          stacked = false
          title   = "Query Router Lambda Metrics"
          region  = var.aws_region
        }
      },
      // Additional widgets for other Lambda functions, API Gateway, etc.
    ]
  })
}

resource "aws_sns_topic" "alarms" {
  name = "${var.project_name}-alarms"
}

resource "aws_sns_topic_subscription" "email" {
  topic_arn = aws_sns_topic.alarms.arn
  protocol  = "email"
  endpoint  = var.alarm_email
}

# Lambda error rate alarm
resource "aws_cloudwatch_metric_alarm" "lambda_errors" {
  for_each = var.lambda_function_names
  
  alarm_name          = "${each.value}-error-alarm"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = 1
  metric_name         = "Errors"
  namespace           = "AWS/Lambda"
  period              = 60
  statistic           = "Sum"
  threshold           = 5
  alarm_description   = "Alarm when ${each.value} Lambda function errors exceed threshold"
  
  dimensions = {
    FunctionName = each.value
  }
  
  alarm_actions = [aws_sns_topic.alarms.arn]
}

# API Gateway 4xx errors alarm
resource "aws_cloudwatch_metric_alarm" "api_4xx_errors" {
  alarm_name          = "${var.project_name}-api-4xx-errors"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = 1
  metric_name         = "4XXError"
  namespace           = "AWS/ApiGateway"
  period              = 60
  statistic           = "Sum"
  threshold           = 50
  alarm_description   = "Alarm when API Gateway 4XX errors exceed threshold"
  
  dimensions = {
    ApiId = var.api_gateway_id
  }
  
  alarm_actions = [aws_sns_topic.alarms.arn]
}

# API Gateway 5xx errors alarm
resource "aws_cloudwatch_metric_alarm" "api_5xx_errors" {
  alarm_name          = "${var.project_name}-api-5xx-errors"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = 1
  metric_name         = "5XXError"
  namespace           = "AWS/ApiGateway"
  period              = 60
  statistic           = "Sum"
  threshold           = 5
  alarm_description   = "Alarm when API Gateway 5XX errors exceed threshold"
  
  dimensions = {
    ApiId = var.api_gateway_id
  }
  
  alarm_actions = [aws_sns_topic.alarms.arn]
}

# CloudFront 5xx errors alarm
resource "aws_cloudwatch_metric_alarm" "cloudfront_5xx_errors" {
  alarm_name          = "${var.project_name}-cloudfront-5xx-errors"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = 1
  metric_name         = "5xxErrorRate"
  namespace           = "AWS/CloudFront"
  period              = 60
  statistic           = "Average"
  threshold           = 5
  alarm_description   = "Alarm when CloudFront 5XX error rate exceeds threshold"
  
  dimensions = {
    DistributionId = var.cloudfront_distribution_id
    Region         = "Global"
  }
  
  alarm_actions = [aws_sns_topic.alarms.arn]
}

// terraform/modules/monitoring/variables.tf
variable "project_name" {
  description = "Project name used as prefix for resources"
}

variable "lambda_function_names" {
  description = "Map of Lambda function names"
  type        = map(string)
}

variable "api_gateway_id" {
  description = "API Gateway ID"
}

variable "cloudfront_distribution_id" {
  description = "CloudFront distribution ID"
}

variable "alarm_email" {
  description = "Email address for CloudWatch alarms"
}

variable "aws_region" {
  description = "AWS region"
  default     = "us-east-1"
}
