// src/components/chat/ChatInterface.jsx
import React, { useState, useEffect, useRef } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { 
  sendMessage, 
  startNewConversation, 
  setActiveConversation 
} from '../../store/conversations';
import { detectAutomation } from '../../store/automations';
import ApiConnector from '../../services/api-connector';
import ProviderBadge from './ProviderBadge';
import AutomationSuggestion from '../automation/AutomationSuggestion';
import MessageList from './MessageList';
import Spinner from '../common/Spinner';
import './ChatInterface.css';

const ChatInterface = () => {
  const dispatch = useDispatch();
  const [input, setInput] = useState('');
  const [isStreaming, setIsStreaming] = useState(false);
  const [streamedResponse, setStreamedResponse] = useState('');
  const [streamProvider, setStreamProvider] = useState(null);
  const [detectedAutomation, setDetectedAutomation] = useState(null);
  const [showTypingIndicator, setShowTypingIndicator] = useState(false);
  const messagesEndRef = useRef(null);
  
  // Get state from Redux store
  const { 
    activeConversation, 
    conversations, 
    messages, 
    loading 
  } = useSelector(state => state.conversations);
  
  // Scroll to bottom when messages change
  useEffect(() => {
    scrollToBottom();
  }, [messages, streamedResponse]);
  
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };
  
  const handleInputChange = (e) => {
    setInput(e.target.value);
  };
  
  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };
  
  const handleSendMessage = async () => {
    if (!input.trim() || isStreaming) return;
    
    const userMessage = input.trim();
    setInput('');
    
    // Check if this might be an automation before sending
    try {
      const automationResult = await ApiConnector.automation.detectAutomation(userMessage);
      
      if (automationResult) {
        // Show automation suggestion if detected
        setDetectedAutomation(automationResult);
        return;
      }
    } catch (error) {
      console.error('Error detecting automation:', error);
      // Continue with normal message flow
    }
    
    // Determine conversation ID (create new if needed)
    let conversationId = activeConversation;
    if (!conversationId) {
      const newConversation = await dispatch(startNewConversation(userMessage)).unwrap();
      conversationId = newConversation.id;
    }
    
    // Add user message immediately for better UX
    dispatch(sendMessage({
      conversationId,
      content: userMessage,
      role: 'user',
      pending: false
    }));
    
    // Show typing indicator
    setShowTypingIndicator(true);
    
    // Start streaming response
    setIsStreaming(true);
    setStreamedResponse('');
    setStreamProvider(null);
    
    try {
      const controller = new AbortController();
      const signal = controller.signal;
      
      // Stream the response
      const response = await fetch('/api/v1/query/stream', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          query: userMessage,
          conversation_id: conversationId
        }),
        signal
      });
      
      if (!response.ok) {
        throw new Error(`API error: ${response.status}`);
      }
      
      // Set up event source
      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      
      while (true) {
        const { done, value } = await reader.read();
        
        if (done) {
          break;
        }
        
        // Process the chunk
        const chunk = decoder.decode(value);
        const events = chunk
          .split('\n\n')
          .filter(Boolean)
          .map(eventStr => {
            const dataStr = eventStr.replace(/^data: /, '');
            try {
              return JSON.parse(dataStr);
            } catch (e) {
              return null;
            }
          })
          .filter(Boolean);
        
        for (const event of events) {
          switch (event.type) {
            case 'provider':
              setStreamProvider(event.provider);
              break;
            case 'content':
              setStreamedResponse(prev => prev + event.content);
              break;
            case 'end':
              // End of response, cleanup will happen outside the loop
              break;
            case 'error':
              console.error('Stream error:', event.error);
              setStreamedResponse(prev => 
                prev + "\n\nI'm sorry, I encountered an error while processing your request."
              );
              break;
            default:
              // Ignore unknown event types
              break;
          }
        }
      }
      
      // Hide typing indicator now that we have content
      setShowTypingIndicator(false);
      
      // Once streaming is complete, fetch the updated messages
      // This ensures we have the proper message IDs and metadata
      dispatch(setActiveConversation(conversationId));
    } catch (error) {
      console.error('Error streaming response:', error);
      
      // Handle error in UI
      setStreamedResponse(
        "I'm sorry, I encountered an error while processing your request. Please try again."
      );
      setShowTypingIndicator(false);
    } finally {
      // Finally end streaming state after a slight delay to prevent flickering
      setTimeout(() => {
        setIsStreaming(false);
        setStreamedResponse('');
      }, 300);
    }
  };
  
  const handleAutomationCancel = () => {
    setDetectedAutomation(null);
  };
  
  const handleAutomationExecute = async () => {
    if (!detectedAutomation) return;
    
    try {
      const result = await dispatch(detectAutomation.executeInstant(detectedAutomation)).unwrap();
      
      // Create a new conversation if needed
      let conversationId = activeConversation;
      if (!conversationId) {
        const newConversation = await dispatch(startNewConversation("Automation")).unwrap();
        conversationId = newConversation.id;
      }
      
      // Add user message
      dispatch(sendMessage({
        conversationId,
        content: detectedAutomation.originalMessage,
        role: 'user',
        pending: false
      }));
      
      // Add system response about automation
      dispatch(sendMessage({
        conversationId,
        content: `✓ ${result.confirmationMessage || 'Automation executed successfully'}`,
        role: 'assistant',
        pending: false,
        metadata: {
          isAutomation: true,
          automationType: detectedAutomation.type,
          automationDetails: result
        }
      }));
    } catch (error) {
      console.error('Error executing automation:', error);
      
      // Add error message
      dispatch(sendMessage({
        conversationId: activeConversation,
        content: `⚠️ Error: ${error.message || 'Failed to execute automation'}`,
        role: 'assistant',
        pending: false,
        metadata: {
          isAutomation: true,
          error: true
        }
      }));
    } finally {
      setDetectedAutomation(null);
    }
  };
  
  return (
    <div className="chat-interface">
      <div className="messages-container">
        <MessageList 
          messages={messages} 
          streamedMessage={isStreaming ? streamedResponse : null}
          streamProvider={streamProvider}
          showTypingIndicator={showTypingIndicator}
        />
        <div ref={messagesEndRef} />
      </div>
      
      {detectedAutomation && (
        <AutomationSuggestion
          automation={detectedAutomation}
          onCancel={handleAutomationCancel}
          onExecute={handleAutomationExecute}
        />
      )}
      
      <div className="input-container">
        <textarea
          value={input}
          onChange={handleInputChange}
          onKeyDown={handleKeyDown}
          placeholder="Type a message..."
          disabled={isStreaming || loading}
          rows={1}
          className="message-input"
        />
        <button 
          onClick={handleSendMessage} 
          disabled={!input.trim() || isStreaming || loading}
          className="send-button"
        >
          {isStreaming ? <Spinner size="small" /> : 'Send'}
        </button>
      </div>
    </div>
  );
};

export default ChatInterface;

// src/components/chat/MessageList.jsx
import React from 'react';
import ReactMarkdown from 'react-markdown';
import ProviderBadge from './ProviderBadge';
import './MessageList.css';

const MessageList = ({ 
  messages, 
  streamedMessage, 
  streamProvider,
  showTypingIndicator 
}) => {
  // If messages is empty, show welcome message
  if (messages.length === 0 && !streamedMessage && !showTypingIndicator) {
    return (
      <div className="welcome-message">
        <h2>Welcome to Conatus</h2>
        <p>Your multi-LLM assistant that automatically routes your query to the best AI model.</p>
        <ul>
          <li>Ask me anything and I'll use the optimal AI for your question</li>
          <li>Request automations like "Send a WhatsApp message to John"</li>
          <li>Create workflows in the Library tab for recurring tasks</li>
        </ul>
      </div>
    );
  }
  
  return (
    <div className="message-list">
      {messages.map(message => (
        <div 
          key={message.id} 
          className={`message ${message.role === 'user' ? 'user-message' : 'assistant-message'}`}
        >
          <div className="message-header">
            <span className="message-role">
              {message.role === 'user' ? 'You' : 'Assistant'}
            </span>
            {message.role === 'assistant' && message.llm_provider && (
              <ProviderBadge provider={message.llm_provider} />
            )}
          </div>
          <div className="message-content">
            {message.metadata?.isAutomation ? (
              <div className="automation-message">{message.content}</div>
            ) : (
              <ReactMarkdown>{message.content}</ReactMarkdown>
            )}
          </div>
        </div>
      ))}
      
      {showTypingIndicator && !streamedMessage && (
        <div className="message assistant-message">
          <div className="message-header">
            <span className="message-role">Assistant</span>
            {streamProvider && <ProviderBadge provider={streamProvider} />}
          </div>
          <div className="message-content">
            <div className="typing-indicator">
              <span></span>
              <span></span>
              <span></span>
            </div>
          </div>
        </div>
      )}
      
      {streamedMessage && (
        <div className="message assistant-message">
          <div className="message-header">
            <span className="message-role">Assistant</span>
            {streamProvider && <ProviderBadge provider={streamProvider} />}
          </div>
          <div className="message-content">
            <ReactMarkdown>{streamedMessage}</ReactMarkdown>
          </div>
        </div>
      )}
    </div>
  );
};

export default MessageList;

// src/components/chat/ProviderBadge.jsx
import React from 'react';
import './ProviderBadge.css';

const ProviderBadge = ({ provider }) => {
  // Define provider display names and colors
  const providerConfig = {
    CLAUDE: {
      name: 'Claude',
      color: '#8D5AE5'
    },
    PERPLEXITY: {
      name: 'Perplexity',
      color: '#13BCFC'
    },
    OPENAI: {
      name: 'OpenAI',
      color: '#19C37D'
    },
    DEEPSEEK: {
      name: 'DeepSeek',
      color: '#FF6D41'
    }
  };
  
  const config = providerConfig[provider] || {
    name: provider,
    color: '#888888'
  };
  
  return (
    <div 
      className="provider-badge"
      style={{ backgroundColor: config.color }}
    >
      {config.name}
    </div>
  );
};

export default ProviderBadge;

// src/components/chat/ChatInterface.css
.chat-interface {
  display: flex;
  flex-direction: column;
  height: 100%;
  max-width: 1000px;
  margin: 0 auto;
  padding: 1rem;
}

.messages-container {
  flex: 1;
  overflow-y: auto;
  padding: 1rem;
  margin-bottom: 1rem;
  border-radius: 0.5rem;
  background-color: #f9f9f9;
}

.input-container {
  display: flex;
  margin-top: auto;
  padding: 0.5rem;
  background-color: #ffffff;
  border-radius: 0.5rem;
  border: 1px solid #e0e0e0;
}

.message-input {
  flex: 1;
  padding: 0.75rem;
  resize: none;
  border: none;
  border-radius: 0.25rem;
  outline: none;
  font-family: inherit;
  font-size: 1rem;
}

.message-input:focus {
  outline: none;
}

.send-button {
  margin-left: 0.5rem;
  padding: 0.5rem 1rem;
  background-color: #2563eb;
  color: white;
  border: none;
  border-radius: 0.25rem;
  cursor: pointer;
  transition: background-color 0.2s;
}

.send-button:hover {
  background-color: #1d4ed8;
}

.send-button:disabled {
  background-color: #93c5fd;
  cursor: not-allowed;
}

// src/components/chat/MessageList.css
.message-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.message {
  padding: 1rem;
  border-radius: 0.5rem;
  max-width: 85%;
}

.user-message {
  align-self: flex-end;
  background-color: #dbeafe;
}

.assistant-message {
  align-self: flex-start;
  background-color: #ffffff;
  border: 1px solid #e0e0e0;
}

.message-header {
  display: flex;
  align-items: center;
  margin-bottom: 0.5rem;
}

.message-role {
  font-weight: 600;
  margin-right: 0.5rem;
}

.message-content {
  word-break: break-word;
  line-height: 1.5;
}

.message-content pre {
  background-color: #f3f4f6;
  padding: 0.75rem;
  border-radius: 0.25rem;
  overflow-x: auto;
}

.message-content code {
  background-color: #f3f4f6;
  padding: 0.125rem 0.25rem;
  border-radius: 0.25rem;
  font-family: monospace;
}

.typing-indicator {
  display: flex;
  align-items: center;
  gap: 0.25rem;
}

.typing-indicator span {
  width: 0.5rem;
  height: 0.5rem;
  border-radius: 50%;
  background-color: #6b7280;
  opacity: 0.6;
  animation: pulse 1.5s infinite ease-in-out;
}

.typing-indicator span:nth-child(2) {
  animation-delay: 0.2s;
}

.typing-indicator span:nth-child(3) {
  animation-delay: 0.4s;
}

@keyframes pulse {
  0%, 100% {
    opacity: 0.4;
    transform: scale(1);
  }
  50% {
    opacity: 1;
    transform: scale(1.2);
  }
}

.welcome-message {
  text-align: center;
  padding: 2rem;
  margin: 2rem 0;
}

.welcome-message h2 {
  margin-bottom: 1rem;
  color: #2563eb;
}

.welcome-message ul {
  text-align: left;
  list-style: disc;
  padding-left: 2rem;
  margin-top: 1rem;
}

.welcome-message li {
  margin-bottom: 0.5rem;
}

.automation-message {
  font-family: monospace;
}

// src/components/chat/ProviderBadge.css
.provider-badge {
  font-size: 0.75rem;
  padding: 0.125rem 0.5rem;
  border-radius: 1rem;
  color: white;
  font-weight: 500;
}
